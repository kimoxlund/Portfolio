// Webkit-style focus
@mixin tab-focus() {
  outline: 0px;
  border-bottom: 2px solid $grey-light;
}

// CSS3 PROPERTIES
// --------------------------------------------------

// Drop shadows
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
          box-shadow: $shadow;
}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  // IE8 filter
  $opacity-ie: ($opacity * 100);
  filter: alpha(opacity=$opacity-ie);
}

@mixin box-sizing($style) {
  -webkit-box-sizing: $style;
  -moz-box-sizing: $style;
  box-sizing: $style;
}

@mixin box-shadow($style) {
  -webkit-box-shadow: $style;
  -moz-box-shadow: $style;
  box-shadow: $style;
}

@mixin border-radius($style) {
  -webkit-border-radius: $style;
  -moz-border-radius: $style;
  border-radius: $style;
}

@mixin transition($style) {
  -webkit-transition: $style;
  -moz-transition: $style;
  -ms-transition: $style;
  -o-transition: $style;
  transition: $style;
}

@mixin ie7-inline-block() {
  display: inline-block;
  *display: inline;
  zoom: 1;
}

// -------------------------------------------------------
// List styles
// -------------------------------------------------------

// Mixins for list style types
@mixin unordered {
   list-style-position: outside;
   list-style-type: disc;
}

@mixin unordered-inside {
   list-style-position: inside;
   list-style-type: disc;
}

@mixin ordered {
  list-style-position: outside;
  list-style-type: decimal;
}

@mixin ordered-inside {
  list-style-position: inside;
  list-style-type: decimal;
}

@mixin nobullet {
  list-style-type: none;
}

// -------------------------------------------------------
// Align things vertically (http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/)
// -------------------------------------------------------

@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

// -------------------------------------------------------
// Retina images
// -------------------------------------------------------

// Usage: Send path, image name, and width and height.
// Name retina images [name]2x.

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin transparent-background($color, $alpha) {
  $rgba: rgba($color, $alpha);
  $ie-hex-str: ie-hex-str($rgba);
  @extend .transparent-bg-ie;
  background-color: $rgba;
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
}

// Extend this class to save bytes
.transparent-bg-ie {
  background-color: transparent;
  zoom: 1;
}

@mixin linear-gradient($fromColor, $toColor) {
  background-color: $toColor; /* Fallback Color */
  background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor)); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image:    -moz-linear-gradient(top, $fromColor, $toColor); /* FF3.6 */
  background-image:     -ms-linear-gradient(top, $fromColor, $toColor); /* IE10 */
  background-image:      -o-linear-gradient(top, $fromColor, $toColor); /* Opera 11.10+ */
  background-image:         linear-gradient(top, $fromColor, $toColor);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

// Transforms
@mixin transform($params) {
  -webkit-transform: $params;
  -moz-transform:    $params;
  -ms-transform:     $params;
  -o-transform:      $params;
  transform:         $params;
}


// -------------------------------------------------------
// HEX to RGB
// -------------------------------------------------------

// http://codepen.io/sturobson/pen/hdKyv
@mixin rgba($color, $value) {
  background-color: $color;
  background-color: rgba($color, $value);
}


// -------------------------------------------------------
// Grid
// -------------------------------------------------------

// Generate columns names span-#
// Called by: @include grid_columns(#) where # is the amount of columns needed
// Perfect for use in breakpoints to use different columns

@mixin grid_columns($columns){
  @for $i from 1 through $columns{
    .colspan#{$columns}-#{$i}{
      width: ((100% / $columns)*$i);
    }
  }
  @for $i from 1 through $columns{
    .push#{$columns}-#{$i}{
      margin-left: ((100% / $columns)*$i);
    }
  }
  @for $i from 1 through $columns{
    .pull#{$columns}-#{$i}{
      margin-right: ((100% / $columns)*$i);
    }
  }
  .push-disable#{$columns}{
    margin-left: 0;
  }
  .pull-disable#{$columns}{
    margin-right: 0;
  }
  .hide-at#{$columns} {
    display: none;
  }
  .block-show-at#{$columns} {
    display: block;
  }
  .inline-show-at#{$columns} {
    display: inline;
    display: inline-block;
  }

}

@mixin grid {
  // Widths
  *[class*="colspan"] {
    width: 100%;
    display: block;
  }
  // Floats
  *[class*="as-grid"] {
    float: left;
    display: inline;
    display: inline-block;
  }
  // Gutters
  *[class*="with-gutter"] {
    @include respond-to($start-columns) {
      margin-bottom: 6em;
      padding-left: $internal-spacing-percent;
    }
  }
}


// -------------------------------------------------------
// Media queries
// -------------------------------------------------------


// Reference widths from settings file
@mixin respond-to($media-min, $IE9: true) {
    @if $IE9 == true {
        .lt-ie9 & {
            @content;
        }
        @media screen and (min-width: $media-min)  {
            @content;
        }
    }
    @else {
        @media screen and (min-width: $media-min) {
            @content;
        }
    }
}

@mixin respond-to-max($media-max, $IE9: true) {
    @if $IE9 == true {
        .lt-ie9 & {
            @content;
        }
        @media screen and (max-width: $media-max - 1px)  {
            @content;
        }
    }
    @else {
        @media screen and (max-width: $media-max - 1px) {
            @content;
        }
    }
}


@mixin respond-to-min-max($media-min, $media-max, $IE9: true) {
    @if $IE9 == true {
        .lt-ie9 & {
            @content;
        }
        @media screen and (min-width: $media-min) and (max-width: $media-max)  {
            @content;
        }
    }
    @else {
         @media screen and (min-width: $media-min) and (max-width: $media-max) {
            @content;
        }
    }
}
